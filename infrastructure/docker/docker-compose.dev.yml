version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: zen_machine_dev
      POSTGRES_USER: zen
      POSTGRES_PASSWORD: zen_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zen"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and streaming
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zen Agent service
  zen-agent:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://zen:zen_password@postgres:5432/zen_machine_dev
      - REDIS_URL=redis://redis:6379/0
      - MODEL_PATH=/app/models/mistral-7b-instruct-v0.3.Q4_K_M.gguf
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ../../models:/app/models:ro
      - ../../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Store Agent service
  store-agent:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://zen:zen_password@postgres:5432/zen_machine_dev
      - REDIS_URL=redis://redis:6379/0
      - MODEL_PATH=/app/models/phi-3-mini-4k-instruct-q4.gguf
      - PORT=8001
    ports:
      - "8001:8001"
    volumes:
      - ../../models:/app/models:ro
      - ../../data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Adversary service
  adversary:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://zen:zen_password@postgres:5432/zen_machine_dev
      - REDIS_URL=redis://redis:6379/0
      - PORT=8002
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Zen UI service
  zen-ui:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../../ui/zen_ui:/app/ui/zen_ui:ro
    command: ["python", "-m", "http.server", "3000", "--directory", "/app/ui/zen_ui"]
    restart: unless-stopped

  # Store UI service
  store-ui:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ../../ui/store_ui:/app/ui/store_ui:ro
    command: ["python", "-m", "http.server", "3001", "--directory", "/app/ui/store_ui"]
    restart: unless-stopped

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:
  grafana_data:
